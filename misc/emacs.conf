(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-clang-candidate-face ((t (:background "black" :foreground "white"))))
 '(ac-clang-selection-face ((t (:background "black" :foreground "red" :weight bold))))
 '(ediff-current-diff-A ((t (:background "red" :foreground "yellow" :weight bold))))
 '(ediff-current-diff-Ancestor ((t (:background "red" :foreground "magenta" :weight bold))))
 '(ediff-current-diff-B ((t (:background "red" :foreground "blue" :weight bold))))
 '(ediff-current-diff-C ((t (:background "red" :foreground "green" :weight bold))))
 '(ediff-even-diff-A ((t (:foreground "yellow"))))
 '(ediff-even-diff-Ancestor ((t (:foreground "magenta"))))
 '(ediff-even-diff-B ((t (:foreground "blue"))))
 '(ediff-even-diff-C ((t (:foreground "green"))))
 '(ediff-fine-diff-A ((t (:background "yellow" :foreground "black"))))
 '(ediff-fine-diff-Ancestor ((t (:background "magenta" :foreground "black"))))
 '(ediff-fine-diff-B ((t (:background "blue" :foreground "black"))))
 '(ediff-fine-diff-C ((t (:background "green" :foreground "black"))))
 '(ediff-odd-diff-A ((t (:background "black" :foreground "yellow"))))
 '(ediff-odd-diff-Ancestor ((t (:background "black" :foreground "magenta"))))
 '(ediff-odd-diff-B ((t (:background "black" :foreground "blue"))))
 '(ediff-odd-diff-C ((t (:background "black" :foreground "green"))))
 '(font-lock-variable-name-face ((t (:foreground "yellow"))))
 '(linum ((t (:inherit (shadow default) :foreground "blue"))))
 '(mode-line ((t (:background "blue" :foreground "black"))))
 '(popup-tip-face ((t (:background "black" :foreground "yellow"))))
 '(show-paren-match ((t (:background "green"))))
 '(show-paren-mismatch ((t (:background "red"))))
 '(tooltip ((t (:background "black" :foreground "yellow")))))

 ;; hide menu
(menu-bar-mode -1)
 ;; enable mouse in xterm-compatible terminals
(xterm-mouse-mode)
 ;; set ctrl+k to kill whole line
(global-set-key (kbd "C-k") 'kill-whole-line)
 ;; auto save and backup files dir
 ;; (setq temporary-file-directory "~/.emacs.d/tmp")
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
 ;; command to duplicate current line
(defun duplicate-line ()
  "duplicate current line" 
  (interactive) (save-excursion (let ((line-text 
  (buffer-substring-no-properties (line-beginning-position) (line-end-position)))) 
  (move-end-of-line 1) (newline) (insert line-text))) (next-line)
)
(global-set-key (kbd "C-d") 'duplicate-line)
 ;; command to comment current line
(defun toggle-comment-on-line () 
  "comment or uncomment current line"
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position))
)
(global-set-key (kbd "M-;") 'toggle-comment-on-line)
 ;; activate matching parentess highlighting
(show-paren-mode)
 ;; activate line numbering on the left margin
(global-linum-mode)
 ;; command to delete current line w/o kill ring
(defun delete-line ()
  "delete current line without writing to kill ring"
  (interactive)
  (delete-region (line-beginning-position) (line-end-position))
)
(global-set-key (kbd "M-k") 'delete-line)
 ;; change the line number format
 ;; (setq linum-format "%4d ")
 ;; command to reload config
(defun reload-config () (interactive) (load-file "~/.emacs"))
 ;; (global-set-key (kbd "C-x M-r") 'reload-config)
 ;; make python2 shebang trigger python-mode
(add-to-list 'interpreter-mode-alist '("python2" . python-mode))
 ;; set default tab width
(setq-default tab-width 4)
 ;; set indentation offset in C mode to same as tab width
(defvaralias 'c-basic-offset 'tab-width)
 ;; use spaces instead of tabs
(setq-default indent-tabs-mode nil)
 ;; set addons path
(add-to-list 'load-path "~/.emacs.d/addons")
 ;; autocomplete addon config
(add-to-list 'load-path "/usr/share/emacs/site-lisp/auto-complete")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "/usr/share/emacs/site-lisp/auto-complete/ac-dict")
(ac-config-default)
(setq ac-quick-help-delay 0.3)
 ;; clang complete addon
 ;; https://github.com/brianjcj/auto-complete-clang
(require 'auto-complete-clang)
(setq clang-completion-suppress-error 't)
(setq ac-clang-flags
      (mapcar (lambda (item)(concat "-I" item))
              (split-string 
"/usr/lib/gcc/x86_64-unknown-linux-gnu/4.8.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/4.8.0/include-fixed
 /usr/include" )))
(defun my-ac-clang-mode-common-hook()
  (define-key c-mode-base-map (kbd "C-@") 'ac-complete-clang)) ;; ctrl+space
(add-hook 'c-mode-common-hook 'my-ac-clang-mode-common-hook)
 ;; glsl mode addon 
 ;; https://github.com/jimhourihan/glsl-mode
(autoload 'glsl-mode "glsl-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode))
(add-hook 'glsl-mode-hook 'auto-complete-mode) ;; enable ac for this mode
 ;; cuda-mode addon
 ;; http://www.emacswiki.org/emacs/CudaMode
(require 'cuda-mode)
