(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-clang-candidate-face ((t (:background "black" :foreground "white"))))
 '(ac-clang-selection-face ((t (:background "black" :foreground "red" :weight bold))))
 '(ediff-current-diff-A ((t (:background "red" :foreground "yellow" :weight bold))))
 '(ediff-current-diff-Ancestor ((t (:background "red" :foreground "magenta" :weight bold))))
 '(ediff-current-diff-B ((t (:background "red" :foreground "blue" :weight bold))))
 '(ediff-current-diff-C ((t (:background "red" :foreground "green" :weight bold))))
 '(ediff-even-diff-A ((t (:foreground "yellow"))))
 '(ediff-even-diff-Ancestor ((t (:foreground "magenta"))))
 '(ediff-even-diff-B ((t (:foreground "blue"))))
 '(ediff-even-diff-C ((t (:foreground "green"))))
 '(ediff-fine-diff-A ((t (:background "yellow" :foreground "black"))))
 '(ediff-fine-diff-Ancestor ((t (:background "magenta" :foreground "black"))))
 '(ediff-fine-diff-B ((t (:background "blue" :foreground "black"))))
 '(ediff-fine-diff-C ((t (:background "green" :foreground "black"))))
 '(ediff-odd-diff-A ((t (:background "black" :foreground "yellow"))))
 '(ediff-odd-diff-Ancestor ((t (:background "black" :foreground "magenta"))))
 '(ediff-odd-diff-B ((t (:background "black" :foreground "blue"))))
 '(ediff-odd-diff-C ((t (:background "black" :foreground "green"))))
 '(font-lock-variable-name-face ((t (:foreground "yellow"))))
 '(linum ((t (:inherit (shadow default) :foreground "blue"))))
 '(minibuffer-prompt ((t (:foreground "blue" :weight bold))))
 '(mode-line ((t (:background "blue" :foreground "black"))))
 '(popup-tip-face ((t (:background "black" :foreground "yellow"))))
 '(show-paren-match ((t (:background "green"))))
 '(show-paren-mismatch ((t (:background "red"))))
 '(tooltip ((t (:background "black" :foreground "yellow"))))
 '(which-func ((t (:inherit mode-line :weight bold)))))
 ;; hide menu
(menu-bar-mode -1)
 ;; enable mouse in xterm-compatible terminals
(xterm-mouse-mode)
 ;; set ctrl+k to kill whole line
(global-set-key (kbd "C-k") 'kill-whole-line)
 ;; auto save and backup files dir
 ;; (setq temporary-file-directory "~/.emacs.d/tmp")
(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
 ;; command to duplicate current line
(defun duplicate-line ()
  "duplicate current line" 
  (interactive) (save-excursion (let ((line-text 
  (buffer-substring-no-properties (line-beginning-position) (line-end-position)))) 
  (move-end-of-line 1) (newline) (insert line-text))) (next-line)
)
(global-set-key (kbd "C-d") 'duplicate-line)
 ;; command to comment current line
(defun toggle-comment-on-line () 
  "comment or uncomment current line"
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position))
)
(global-set-key (kbd "M-;") 'toggle-comment-on-line)
 ;; activate matching parentheses highlighting
(show-paren-mode)
 ;; activate line numbering on the left margin
(global-linum-mode)
 ;; command to delete current line w/o kill ring
(defun delete-line ()
  "delete current line without writing to kill ring"
  (interactive)
  (delete-region (line-beginning-position) (line-end-position))
)
(global-set-key (kbd "M-k") 'delete-line)
 ;; change the line number format
 ;; (setq linum-format "%4d ")
 ;; command to reload config
(defun reload-config () (interactive) (load-file "~/.emacs"))
 ;; (global-set-key (kbd "C-x M-r") 'reload-config)
 ;; make python2 shebang trigger python-mode
(add-to-list 'interpreter-mode-alist '("python2" . python-mode))
 ;; set default tab width
(setq-default tab-width 4)
 ;; set indentation offset in C mode to same as tab width
(defvaralias 'c-basic-offset 'tab-width)
 ;; use spaces instead of tabs
(setq-default indent-tabs-mode nil)
 ;; indentation in python
(setq-default python-indent-offset 4)
 ;; set addons path
(add-to-list 'load-path "~/.emacs.d/addons")
 ;; autocomplete addon config
(add-to-list 'load-path "/usr/share/emacs/site-lisp/auto-complete")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "/usr/share/emacs/site-lisp/auto-complete/ac-dict")
(ac-config-default)
(setq ac-quick-help-delay 0.3)
 ;; clang complete addon
 ;; https://github.com/brianjcj/auto-complete-clang
(require 'auto-complete-clang)
(setq clang-completion-suppress-error 't)
(setq ac-clang-flags
      (mapcar (lambda (item)(concat "-I" item))
              (split-string 
"/usr/lib/gcc/x86_64-unknown-linux-gnu/4.8.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-unknown-linux-gnu/4.8.0/include-fixed
 /usr/include" )))
(add-to-list 'ac-clang-flags "-code-completion-macros")
(add-to-list 'ac-clang-flags "-code-completion-patterns")
(defun my-ac-clang-mode-common-hook()
  (define-key c-mode-base-map (kbd "C-@") 'ac-complete-clang)) ;; ctrl+space
(add-hook 'c-mode-common-hook 'my-ac-clang-mode-common-hook)
 ;; glsl mode addon 
 ;; https://github.com/jimhourihan/glsl-mode
(autoload 'glsl-mode "glsl-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode))
(add-hook 'glsl-mode-hook 'auto-complete-mode) ;; enable ac for this mode
 ;; cuda-mode addon
 ;; http://www.emacswiki.org/emacs/CudaMode
(require 'cuda-mode)
 ;; markdown-mode addon
 ;; http://jblevins.org/projects/markdown-mode/markdown-mode.el
(autoload 'markdown-mode "markdown-mode.el"
   "Major mode for editing Markdown files" t)
(setq auto-mode-alist
   (cons '("\.md" . markdown-mode) auto-mode-alist))
(add-hook 'markdown-mode-hook 'flyspell-mode)
 ;; set the default ispell dict
(setq-default  ispell-local-dictionary "en_US")  
 ;; display column number in mode line
(column-number-mode)
 ;; wrap lines without splitting off words
(setq-default word-wrap t)
 ;; add a command to tell ispell to not check text inside "".
(defun ispell-no-checking-strings () (interactive) (add-to-list 'ispell-skip-region-alist '("\".*\"")))
 ;; modified ispell-comments-and-strings which only checks comments
(defun ispell-comments ()
  (interactive)
  (goto-char (point-min))
  (let (state done)
    (while (not done)
      (setq done t)
      (setq state (parse-partial-sexp (point) (point-max)
				      nil nil state 1))
      (if (nth 4 state)
	  (let ((start (point)))
	    (setq state (parse-partial-sexp start (point-max)
					    nil nil state 'syntax-table))
	  (if (nth 4 state)
 		(error "Unterminated comment"))
	    (save-excursion
	      (setq done (not (ispell-region start (point))))))))))

 ;; el-get
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")
(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
    (let (el-get-master-branch)
      (goto-char (point-max))
      (eval-print-last-sexp))))
(el-get 'sync)

 ;; jedi (python auto-compeltion) 
(add-to-list 'load-path "~/.emacs.d/addons/jedi")
(setq jedi:setup-keys t)
 ;; autocomplete here (ctrl+space)
(setq jedi:key-complete (kbd "C-@"))
(require 'jedi)
 ;; (autoload 'jedi:setup "jedi" nil t)
(add-hook 'python-mode-hook 'jedi:setup)
 ;; fix python2 path
 ;; (setq jedi:server-command (list "/usr/bin/python2" "~/.emacs.d/addons/jedi/jediepcserver.py"))
(setq jedi:server-command (list "/usr/bin/python2" jedi:server-script))
 ;; highlight puctuation
(defun highlight-pun () 
 (interactive)
 (font-lock-add-keywords nil '(("[<>:#&*=+^%!~,.?;/-]" 0 font-lock-function-name-face)))
)
(add-hook 'prog-mode-hook 'highlight-pun)
(add-hook 'text-mode-hook 'highlight-pun)
 ;; always scroll one line at time (default is to scroll half screen when cursor goes out of the screen)
(setq scroll-step            1
      scroll-conservatively  10000)
 ;; display function name in mode line
(which-function-mode)
 ;; function for toggling mode line
(defun toggle-mode-line () 
  (interactive) 
  (setq mode-line-format
    (if (equal mode-line-format nil)
      (default-value 'mode-line-format)
    ) 
  )
  (redraw-display)
)
 ;; set time display fromat to 24-hour
 ;; (setq display-time-24hr-format t)
 ;; display time and system load
 ;; (display-time-mode)
 ;; display percentage of battery charge left
 ;; x(display-battery-mode)

 ;; set default mode to text mode
